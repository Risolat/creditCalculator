{"version":3,"sources":["components/DisplayChild.js","components/Display.js","components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["DisplayChild","func","text","defaultProps","Display","state","Rate","calculateMonthlyRepayment","props","amount","years","monthlyReapayment","Math","round","percentageRate","className","this","Component","Calculator","amountMoney","yearsValue","handleAmountChange","value","setState","handleYearChange","step","maxValue","minValue","onChange","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wUAEMA,EAAe,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,KAC3B,OACE,8BACGD,EADH,IACS,+BAAQC,KAKrBF,EAAaG,aAAe,CAC1BF,KAAM,kBAAM,qDACZC,KAAM,qBAQOF,QCmBAI,E,4MAnCbC,MAAO,CACLC,KAAM,I,EAGRC,0BAA4B,WAAO,IAAD,EACR,EAAKC,MAAtBC,EADyB,EACzBA,OAAQC,EADiB,EACjBA,MAITC,GAFgB,EAAKN,MAAMC,KAAO,GACNG,GACa,GAARC,GAEvC,OAAO,2BAAIE,KAAKC,MAAMF,GAAf,S,EAGTG,eAAiB,WACf,OAAO,2BAAoB,IAAhB,EAAKT,MAAMC,KAAf,M,uDAGP,OACE,yBAAKS,UAAU,QACd,kBAAC,EAAD,CAAcd,KAAMe,KAAKF,iBAAkBZ,KAAK,kBAChD,kBAAC,EAAD,CACGD,KAAMe,KAAKT,4BACXL,KAAK,2B,GAxBOe,aC2CPC,G,wNArCbb,MAAQ,CACNc,YAAa,IACbC,WAAY,G,EAGdC,mBAAqB,SAACC,GACpB,EAAKC,SAAS,CAACJ,YAAaG,K,EAE9BE,iBAAmB,SAACF,GAClB,EAAKC,SAAS,CAACH,WAAYE,K,uDAGpB,IAAD,EAC4BN,KAAKX,MAAhCc,EADD,EACCA,YAAaC,EADd,EACcA,WACpB,OACE,6BACE,8CAAoBD,EAApB,SACA,kBAAC,IAAD,CACEM,KAAM,IACNC,SAAU,IACVC,SAAU,EACVL,MAAOH,EACPS,SAAUZ,KAAKK,qBAEjB,sCAAYD,EAAZ,UACA,kBAAC,IAAD,CACEK,KAAM,EACNC,SAAU,EACVC,SAAU,EACVL,MAAOF,EACPQ,SAAUZ,KAAKQ,mBAEjB,kBAAC,EAAD,CAASd,MAAOU,EAAYX,OAAQU,S,GAjCnBF,cCQVY,E,uKATX,OACE,yBAAKd,UAAU,OACb,2DACA,kBAAC,EAAD,W,GALUE,aCOEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b9f90fe1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst DisplayChild = ({func, text}) => {\r\n  return(\r\n    <span>\r\n      {func} <small>{text}</small>\r\n    </span>\r\n  );\r\n};\r\n\r\nDisplayChild.defaultProps = {\r\n  func: () => <p>Missing numeric value</p>,\r\n  text: \"No Value Provided\"\r\n};\r\n\r\n// DisplayChild.propTypes ={\r\n//   func: PropTypes.object.isRequired,\r\n//   text: PropTypes.string.isRequired\r\n// };\r\n\r\nexport default DisplayChild;","import React, { Component } from 'react';\r\nimport DisplayChild from './DisplayChild';\r\n\r\nclass Display extends Component{\r\n  state ={\r\n    Rate: 0.3\r\n  };\r\n\r\n  calculateMonthlyRepayment = () => {\r\n    const {amount, years} = this.props;\r\n\r\n    const decimalformat = this.state.Rate + 1;\r\n    const totalOwed = decimalformat * amount;\r\n    const monthlyReapayment = totalOwed / (years * 12);\r\n\r\n    return <p>{Math.round(monthlyReapayment)}so'm</p>\r\n  }\r\n\r\n  percentageRate = () => {\r\n    return <p>{this.state.Rate*100}%</p>\r\n  }\r\n  render(){\r\n    return(\r\n      <div className=\"flex\">\r\n       <DisplayChild func={this.percentageRate()} text=\"interest rate\"/>\r\n       <DisplayChild \r\n          func={this.calculateMonthlyRepayment()}\r\n          text=\"Monthly Repayment\"\r\n       />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n// Display.propTypes = {\r\n//   years: PropTypes.number.isRequired,\r\n//   amount: PropTypes.number.isRequired\r\n// };\r\n\r\nexport default Display;","import React, { Component } from 'react';\r\nimport InputRange from 'react-input-range';\r\nimport Display from './Display';\r\n\r\nimport \"../styles/Calculator.css\";\r\nimport \"react-input-range/lib/css/index.css\";\r\n\r\n\r\nclass Calculator extends Component{\r\n  state = {\r\n    amountMoney: 1000,\r\n    yearsValue: 1\r\n  };\r\n\r\n  handleAmountChange = (value) =>{\r\n    this.setState({amountMoney: value});\r\n  };\r\n  handleYearChange = (value) => {\r\n    this.setState({yearsValue: value});\r\n  };\r\n\r\n  render(){\r\n    const {amountMoney, yearsValue} = this.state;\r\n    return(\r\n      <div>\r\n        <h4>Kerakli Miqdor {amountMoney} so'm</h4>\r\n        <InputRange\r\n          step={1000}\r\n          maxValue={1000000}\r\n          minValue={1}\r\n          value={amountMoney}\r\n          onChange={this.handleAmountChange}\r\n        />\r\n        <h4>Muddat {yearsValue} yilga</h4>\r\n        <InputRange \r\n          step={1}\r\n          maxValue={3}\r\n          minValue={1}\r\n          value={yearsValue}\r\n          onChange={this.handleYearChange}\r\n        />\r\n        <Display years={yearsValue} amount={amountMoney} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Calculator;","import React, { Component } from 'react';\nimport './App.css';\nimport Calculator from './components/Calculator';\n\n\nclass App extends Component {\n  render(){\n    return(\n      <div className=\"App\">\n        <h1>Kredit Turi: Ipoteka Yillik</h1>\n        <Calculator />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}